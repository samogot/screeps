/**
 * Claim this structure to take control over the room. The controller structure cannot be damaged or destroyed.
 *
 * It can be addressed by {@link Room.controller} property.
 *
 * <table class="table gameplay-info">
 *
 *     <tr>
 *         <th><b>Level</b></th>
 *         <th>Upgrade to next level</th>
 *         <th>Downgrade timer</th>
 *     </tr>
 *     <tr>
 *         <td>1</td>
 *         <td>200 energy</td>
 *         <td>20,000 ticks</td>
 *     </tr>
 *     <tr>
 *         <td>2</td>
 *         <td>45,000 energy</td>
 *         <td>5,000 ticks</td>
 *     </tr>
 *     <tr>
 *         <td>3</td>
 *         <td>135,000 energy</td>
 *         <td>10,000 ticks</td>
 *     </tr>
 *     <tr>
 *         <td>4</td>
 *         <td>405,000 energy</td>
 *         <td>20,000 ticks</td>
 *     </tr>
 *     <tr>
 *         <td>5</td>
 *         <td>1,215,000 energy</td>
 *         <td>40,000 ticks</td>
 *     </tr>
 *     <tr>
 *         <td>6</td>
 *         <td>3,645,000 energy</td>
 *         <td>60,000 ticks</td>
 *     </tr>
 *     <tr>
 *         <td>7</td>
 *         <td>10,935,000 energy</td>
 *         <td>100,000 ticks</td>
 *     </tr>
 *     <tr>
 *         <td>8</td>
 *         <td>â€”</td>
 *         <td>150,000 ticks</td>
 *     </tr>
 *
 * </table>
 *
 * ### Safe mode
 *
 * <table class=gameplay-info>
 *
 *     <tr>
 *         <td><b>Effect</b></td>
 *         <td>
 *             <p>Blocks <code>attack</code>, <code>rangedAttack</code>, <code>rangedMassAttack</code>, <code>dismantle</code>, <code>heal</code>, <code>rangedHeal</code>, <code>attackController</code> and <code>withdraw</code> methods of all hostile creeps in the room. Only one room can be in safe mode at the same time.</p>
 *             <p>When safe mode is active, all hostile creeps become visually transparent and passable - your creeps can move through them freely (but not vice versa).</p>
 *         </td>
 *     </tr>
 *     <tr>
 *         <td><b>Duration</b></td>
 *         <td>20,000 ticks</td>
 *     </tr>
 *     <tr>
 *         <td><b>Cooldown</b></td>
 *         <td>50,000 ticks (no cooldown in Novice Areas)</td>
 *     </tr>
 *     <tr>
 *         <td><b>Generation</b></td>
 *         <td>
 *             <ul>
 *                 <li>Each new controller level generates one available activation</li>
 *                 <li>Can be generated by creeps using 1,000 ghodium</li>
 *                 <li>All available activations are reset if the controller is downgraded</li>
 *             </ul>
 *         </td>
 *     </tr>
 *
 * </table>
 */
interface StructureController extends OwnedStructure {
    /**
     * Current controller level, from 0 to 8.
     */
    level: number,

    /**
     * The current progress of upgrading the controller to the next level.
     */
    progress: number,

    /**
     * The progress needed to reach the next level.
     */
    progressTotal: number,

    /**
     * An object with the controller reservation info if present:
     */
    reservation: {

        /**
         * The name of a player who reserved this controller.
         */
        username: string,

        /**
         * The amount of game ticks when the reservation will end.
         */
        ticksToEnd: number,
    },

    /**
     * How many ticks of safe mode remaining, or undefined.
     */
    safeMode: number,

    /**
     * Safe mode activations available to use.
     */
    safeModeAvailable: number,

    /**
     * During this period in ticks new safe mode activations will be blocked, undefined if cooldown is inactive.
     */
    safeModeCooldown: number,

    /**
     * An object with the controller sign info if present:
     */
    sign: {

        /**
         * The name of a player who signed this controller.
         */
        username: string,

        /**
         * The sign text.
         */
        text: string,

        /**
         * The sign time in game ticks.
         */
        time: number,

        /**
         * The sign real date.
         */
        datetime: Date,
    },

    /**
     * The amount of game ticks when this controller will lose one level. This timer can be reset by using <code>{@link Creep.upgradeController}</code>.
     */
    ticksToDowngrade: number,

    /**
     * The amount of game ticks while this controller cannot be upgraded due to attack. Safe mode is also unavailable during this period.
     */
    upgradeBlocked: number,

    /**
     * Activate safe mode if available.
     *
     * This method is an action that changes game state. It has additional 0.2 CPU cost added to its natural cost in case if {@link OK} code is returned.
     *
     * @return {number} One of the following codes:
     * <table>
     *   <tr>
     *     <td>{@link OK}</td>
     *     <td>The operation has been scheduled successfully.</td>
     *   </tr>
     *   <tr>
     *     <td>{@link ERR_NOT_OWNER}</td>
     *     <td>You are not the owner of this controller.</td>
     *   </tr>
     *   <tr>
     *     <td>{@link ERR_BUSY}</td>
     *     <td>There is another room in safe mode already.</td>
     *   </tr>
     *   <tr>
     *     <td>{@link ERR_NOT_ENOUGH_RESOURCES}</td>
     *     <td>There is no safe mode activations available.</td>
     *   </tr>
     *   <tr>
     *     <td>{@link ERR_TIRED}</td>
     *     <td>The previous safe mode is still cooling down.</td>
     *   </tr>
     * </table>
     *
     * @example
     * room.controller.activateSafeMode();
     */
    activateSafeMode(): number,

    /**
     * Make your claimed controller neutral again.
     *
     * This method is an action that changes game state. It has additional 0.2 CPU cost added to its natural cost in case if {@link OK} code is returned.
     *
     * @return {number} One of the following codes:
     * <table>
     *   <tr>
     *     <td>{@link OK}</td>
     *     <td>The operation has been scheduled successfully.</td>
     *   </tr>
     *   <tr>
     *     <td>{@link ERR_NOT_OWNER}</td>
     *     <td>You are not the owner of this controller.</td>
     *   </tr>
     * </table>
     *
     * @example
     * room.controller.unclaim();
     */
    unclaim(): number,
}